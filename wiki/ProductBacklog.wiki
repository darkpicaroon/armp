#labels Phase-Requirements,Phase-Design,Phase-Implementation
==== About ====
The Product Backlog evolves during the Use Case (new stories, modified importance, ...).
The Product Owner is in charge of "gardening" this table (he is often assisted by the Scrum Master).

=== Backlog ===
<table width="100%" border="0">
<tr>
<td width="auto"></td>
<td width="24">http://fabienrenaud.com/armp/success.gif</td>
<td width="60">_Success_</td>
<td width="24">http://fabienrenaud.com/armp/star-gold.png</td>
<td width="110">_Work in Progress_</td>
<td width="24">http://fabienrenaud.com/armp/star-white.png</td>
<td width="55">_Standy_</td>
<td width="24">http://fabienrenaud.com/armp/warning.gif</td>
<td width="150">_Canceled or Postpone_</td>
</tr>
</table>
||  *[LabelInformation ID]* || *[LabelInformation Description]* || *[LabelInformation How to Demo]* || *[LabelInformation Imp.]* || *[LabelInformation Est.]* || *[LabelInformation Sprint]* || *[LabelInformation Status]* ||
|| US01 || Installation of the [http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/heliossr1 Java eclipse IDE (Helios version)], the [http://developer.android.com/sdk/android-2.2.html SDK for Android 2.2] and the [http://developer.android.com/sdk/eclipse-adt.html ADT plugin]. || Launch _eclipse_ and the _Android SDK and AVD Manager_. || 100 || 1 || [Sprint1 Sprint 1] || http://fabienrenaud.com/armp/success.gif ||
|| US02 || Implementation of an [http://developer.android.com/guide/tutorials/hello-world.html Hello World application for Android] and test with the Android emulator. || Run the test from eclipse. || 99 || 1 || [Sprint1 Sprint 1] || http://fabienrenaud.com/armp/success.gif ||
|| US03 || Download and push on the svn of the [http://android.git.kernel.org/?p=platform/packages/apps/Music.git;a=summary Android stock music application]. || Build and run the base application. [http://code.google.com/p/armp/source/detail?r=33 See revision 33.]|| 98 || 1/2 || [Sprint1 Sprint 1] || http://fabienrenaud.com/armp/success.gif ||
|| US04 || Add a tab displaying a map view on the application. || See the [http://code.google.com/p/armp/wiki/US04_HowToDemo wiki page.] || 97 || 1.5 || [Sprint1 Sprint 1] || http://fabienrenaud.com/armp/success.gif ||
|| US05 || Creation of the music web services comparision matrix. || Read the [MusicWSComparison Music Web Services comparison] page. || 75 || 1/2 || [Sprint1 Sprint 1] || http://fabienrenaud.com/armp/success.gif ||
|| US06 || Study and compare the following web services : Deezer, Last.FM and Grooveshark. || Read the [MusicWSComparison Music Web Services comparison] page. || 74 || 2 || [Sprint1 Sprint 1] || http://fabienrenaud.com/armp/success.gif ||
|| US07 || Study and compare the following web services : Spotify, Pandora and Soundcloud. || Read the [MusicWSComparison Music Web Services comparison] page. || 73 || 2 || [Sprint1 Sprint 1] || http://fabienrenaud.com/armp/success.gif ||
|| US14 || Read and understand the Stock Media Player original source code (cf.  [Sprint1 US03]) by trying to add a _Now Playing_ panel at the bottom of the Map View of ARMP (cf. [Sprint1 US04]). || Look at the onCreate method of the LocalizedMusicActivity.java file and its associated layout. || 96 || 8 || [Sprint2 Sprint 2] || http://fabienrenaud.com/armp/success.gif ||
|| US08 || Download of the OpenAL and build with the NDK. || Follow the beginning of [http://pielot.org/category/ndk-2/ these instructions] || 95 || 3 || [Sprint2 Sprint 2] || http://fabienrenaud.com/armp/success.gif ||
|| US15 || Play a short music with the OpenAL on an ARMP event. || Play a WAV file by following the end of the [http://pielot.org/category/ndk-2/ pielot tutorial]. || 94 || 1 || [Sprint2 Sprint 2] || http://fabienrenaud.com/armp/success.gif ||
|| US16 || Keep playing a background music with the OpenAL after ARMP has been exited. || _It is the default behavior of OpenAL._ || 93 || 2 || [Sprint2 Sprint 2] || http://fabienrenaud.com/armp/success.gif ||
|| US17 || Bind the ARMP GUI to the music played by the OpenAL by displaying track information such as _title_, _artist_, _duration_... || _Cancelled because of only WAV files._  || 92 || 5 || [Sprint2 Sprint 2] || http://fabienrenaud.com/armp/warning.gif ||
|| US09 || Implementation of web hosted music playback with the OpenAL. || Play a web hosted music with OpenAL on Android || 91 || 2 || [Sprint2 Sprint 2] || http://fabienrenaud.com/armp/warning.gif ||
|| US19 || Try to play an OGG file or a MP3 file from Android using the OpenAL. || Play an OGG or MP3 file from ARMP with the OpenAL. || 90 || 5 || [Sprint3 Sprint 3] || http://fabienrenaud.com/armp/warning.gif ||
|| US10 || Find an alternative to OpenAL to play spatialized music on Android. || The API 9 of Android (v2.3.1) supports OpenSL ES which provides 3D audio effects and spatialized music features. || 89 || 2 || [Sprint3 Sprint 3] || http://fabienrenaud.com/armp/success.gif ||
|| US11 || Build, test and understand the OpenSL ES sample (_native-audio_) provided by the NDK. || Run it from eclipse on Android. || 88 || 3 || [Sprint3 Sprint 3] || http://fabienrenaud.com/armp/success.gif ||
|| US12 || Adapt the OpenSL ES sample (cf. [Sprint3 US11]) and reduce the code to the necessary parts to use it with ARMP. || Play a music file from ARMP and with OpenSL ES. || 87 || 1 || [Sprint3 Sprint 3] || http://fabienrenaud.com/armp/success.gif ||
|| US20 || Adapt the _Simple 3D_ example from the [http://www.khronos.org/registry/sles/specs/OpenSL_ES_Specification_1.1.pdf OpenSL ES reference] (page 526) to bring 3D effects to a music played from ARMP. || Play a music with ARMP. If the 3D effect sample is enabled, the music looks like turning around the listener. || 86 || 2 || [Sprint3 Sprint 3] || http://fabienrenaud.com/armp/warning.gif ||
|| US13 || Orientate the music with the Android compass. ||  || 85 || 5 || [Sprint3 Sprint 3] || http://fabienrenaud.com/armp/warning.gif ||
|| US21 || Database design and MySQL implementation. || On a wiki page: schema, mwb file, design explanations... || 84 || 0 || [Sprint4 Sprint 4] || http://fabienrenaud.com/armp/star-white.png ||
|| US22 || Implementation of a RESTful WS providing a KML file displaying spots based on location of the user. || On a wiki page: request & response data, kml sample, WS url, explanations... || 83 || 0 || [Sprint4 Sprint 4] || http://fabienrenaud.com/armp/star-white.png ||
|| US23 || Implementation of a RESTful WS providing a XML file giving information about channels for a given spot. || Idem || 82 || 0 || [Sprint4 Sprint 4] || http://fabienrenaud.com/armp/star-white.png ||
|| US24 || Implementation of a RESTful WS providing a XML file giving music/stream metadata and if it is a stream, the source of the stream. || Idem || 81 || 0 || [Sprint4 Sprint 4] || http://fabienrenaud.com/armp/star-white.png ||
|| US25 || Implementation of classes related to data provided by WS (rel. [Sprint4 US22]-[Sprint4 US24]) for the client side. || On the wiki page: UML schemas, ... || 80 || 0 || [Sprint4 Sprint 4] || http://fabienrenaud.com/armp/star-white.png ||
|| US26 || Implementation of a client-side class requesting WS (rel. [Sprint4 US22]-[Sprint4 US24]) and transforming results into Java objects (rel. [Sprint4 US25]). || On the wiki page: ref to the code, test results || 79 || 0 || [Sprint4 Sprint 4] || http://fabienrenaud.com/armp/star-white.png ||
|| US27 || Display spots on the Google Map view using KML files provided by the WS related to the [Sprint4 US22]. || On the wiki page: how the KML file is put in the map view, screenshot... || 78 || 3 || [Sprint4 Sprint 4] || http://fabienrenaud.com/armp/success.gif ||
|| US28 || Display information about channels when clicking on a spot using XML files provided by the WS related to the [Sprint4 US23]. || screenshot || 77 || 3 || [Sprint4 Sprint 4] || http://fabienrenaud.com/armp/star-gold.png ||
|| US29 || Display information about streams/musics when clicking on a channel using XML files provided by the WS related to the [Sprint4 US24]. || screenshot || 76 || 3 || [Sprint4 Sprint 4] || http://fabienrenaud.com/armp/star-white.png ||